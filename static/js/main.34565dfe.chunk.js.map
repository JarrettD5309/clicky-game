{"version":3,"sources":["images/acen.jpeg","images/bombscare.jpg","images/dubwar.jpg","images/edge.jpg","images/liquid.jpg","images/mule.jpg","images/narramind.jpg","images/prodigy.jpg","images/shutup.jpg","images/sl2.jpg","images/sonz.jpg","images/urbanshakedown.jpg","components/Navbar.js","components/Counter.js","components/PlayAgain.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","Counter","props","imageArr","map","result","i","onClick","countScore","name","key","alt","src","PlayAgain","initialState","GameContainer","state","active","score","Acen","clicked","Bombscare","Dubwar","Edge","Liquid","Mule","Narramind","Prodigy","Shutup","Sl2","Sonz","Urbanshakedown","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","areYouActive","handleActive","setState","console","log","newScore","currentArr","shuffledResetArr","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34565dfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/acen.bc81fcb9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/bombscare.0f8267f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dubwar.a7016ae5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/edge.0139c802.jpg\";","module.exports = __webpack_public_path__ + \"static/media/liquid.4ffc7869.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mule.4aac016e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/narramind.714320f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/prodigy.08069991.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shutup.f317be7a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sl2.81ea9f72.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sonz.5d91cf51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/urbanshakedown.26c21667.jpg\";","import React from \"react\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <div className=\"mx-auto order-0\">\r\n                <a className=\"navbar-brand mx-auto\" href=\"/\">\r\n                    Breakbeat Hardcore Memory\r\n                </a>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Counter(props) {\r\n        return (\r\n            <div>\r\n                <h2>Play the game</h2>\r\n                <div className=\"row\">\r\n                    {props.imageArr.map((result,i) => (\r\n                        <div className=\"col-6 col-md-4 mb-2\">\r\n                            <button className=\"btn btn-default\" onClick={()=>props.countScore(result.name,i)} key={result.name}><img alt=\"record label\" className=\"rounded img-fluid\" src={result.src}/></button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            );\r\n\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\n\r\nfunction PlayAgain(props) {\r\n    return (\r\n        <div>\r\n        <h2>Please play again</h2>\r\n        <button className=\"btn btn-primary\" onClick={()=> props.initialState()}>PlayAgain</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgain;","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Counter from \"./Counter\";\r\nimport PlayAgain from \"./PlayAgain\";\r\nimport Acen from \"../images/acen.jpeg\";\r\nimport Bombscare from \"../images/bombscare.jpg\";\r\nimport Dubwar from \"../images/dubwar.jpg\";\r\nimport Edge from \"../images/edge.jpg\";\r\nimport Liquid from \"../images/liquid.jpg\";\r\nimport Mule from \"../images/mule.jpg\";\r\nimport Narramind from \"../images/narramind.jpg\";\r\nimport Prodigy from \"../images/prodigy.jpg\";\r\nimport Shutup from \"../images/shutup.jpg\";\r\nimport Sl2 from \"../images/sl2.jpg\";\r\nimport Sonz from \"../images/sonz.jpg\";\r\nimport Urbanshakedown from \"../images/urbanshakedown.jpg\";\r\n\r\nclass GameContainer extends React.Component {\r\n\r\n    state = {\r\n        active: true,\r\n        score: 0,\r\n        imageArr: [\r\n            { name: \"Acen\", src: Acen, clicked: false },\r\n            { name: \"Bombscare\", src: Bombscare, clicked: false },\r\n            { name: \"Dub War\", src: Dubwar, clicked: false },\r\n            { name: \"DJ Edge\", src: Edge, clicked: false },\r\n            { name: \"Liquid\", src: Liquid, clicked: false },\r\n            { name: \"Mule\", src: Mule, clicked: false },\r\n            { name: \"Narramind\", src: Narramind, clicked: false },\r\n            { name: \"Prodigy\", src: Prodigy, clicked: false },\r\n            { name: \"Shutup\", src: Shutup, clicked: false },\r\n            { name: \"Sl2\", src: Sl2, clicked: false },\r\n            { name: \"Sonz\", src: Sonz, clicked: false },\r\n            { name: \"Urban Shakedown\", src: Urbanshakedown, clicked: false }\r\n        ]\r\n    }\r\n\r\n    shuffle = (array) => {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    areYouActive = () => {\r\n        if (this.state.active === true) {\r\n            return <Counter countScore={this.countScore} imageArr={this.state.imageArr} handleActive={this.handleActive} />;\r\n        } else {\r\n            return <PlayAgain initialState={this.initialState} />;\r\n        }\r\n    }\r\n\r\n    handleActive = () => {\r\n        if (this.state.active === true) {\r\n            this.setState({ active: false })\r\n        } else {\r\n            this.setState({ active: true })\r\n        }\r\n\r\n    }\r\n\r\n    countScore = (name,i) => {\r\n        console.log(name);\r\n        if (this.state.imageArr[i].name === name && this.state.imageArr[i].clicked === false) {\r\n            let newScore = this.state.score + 1;\r\n            console.log(newScore);\r\n            let currentArr = this.state.imageArr;\r\n            currentArr[i].clicked=true;\r\n            console.log(currentArr[i]);\r\n            this.setState({ score: newScore });\r\n            this.setState({imageArr:currentArr});\r\n            this.setState({ imageArr: this.shuffle(this.state.imageArr) })\r\n        } else {\r\n            this.setState({active:false});\r\n        }\r\n\r\n    }\r\n\r\n    initialState = () => {\r\n        let shuffledResetArr = this.shuffle([\r\n            { name: \"Acen\", src: Acen, clicked: false },\r\n            { name: \"Bombscare\", src: Bombscare, clicked: false },\r\n            { name: \"Dub War\", src: Dubwar, clicked: false },\r\n            { name: \"DJ Edge\", src: Edge, clicked: false },\r\n            { name: \"Liquid\", src: Liquid, clicked: false },\r\n            { name: \"Mule\", src: Mule, clicked: false },\r\n            { name: \"Narramind\", src: Narramind, clicked: false },\r\n            { name: \"Prodigy\", src: Prodigy, clicked: false },\r\n            { name: \"Shutup\", src: Shutup, clicked: false },\r\n            { name: \"Sl2\", src: Sl2, clicked: false },\r\n            { name: \"Sonz\", src: Sonz, clicked: false },\r\n            { name: \"Urban Shakedown\", src: Urbanshakedown, clicked: false }\r\n        ]);\r\n        this.setState({\r\n            active: true,\r\n            score: 0,\r\n            imageArr: shuffledResetArr})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <div className=\"container\">\r\n                    <h2>Score: {this.state.score}</h2>\r\n                    {this.areYouActive()}\r\n                    {/* {this.state.active===true ? <Counter countScore={this.countScore} imageArr={this.imageArr} handleActive={this.handleActive}/>:<PlayAgain handleActive={this.handleActive}/>} */}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\nimport GameContainer from \"./components/GameContainer\";\nimport './App.css';\n\nfunction App() {\n  return <GameContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}